generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model Avatars {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String         @unique
  phone_number    String?
  address         String?
  password        String
  avatar          Avatars?
  role            Role           @default(User)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  twoFactorAuth   TwoFactorAuth?
  sessions        UserSession[]
  @@unique([email, phone_number], name: "unique_email_phone_number")
}

model RateLimitEntry {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  createdAt   DateTime @default(now())
  @@index([identifier, createdAt])
}

model LoginAttempt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  successful  Boolean
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  @@index([identifier, successful, createdAt])
}

model AccountLockout {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  duration    Int      // in milliseconds
  createdAt   DateTime @default(now())
  @@index([identifier, createdAt])
}

model TwoFactorAuth {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  secret      String
  isEnabled   Boolean  @default(false)
  backupCodes String   // JSON array of backup codes
  enabledAt   DateTime?
  disabledAt  DateTime?
  user        User     @relation(fields: [userId], references: [id])
}

model UserSession {
  id                 String   @id @map("_id")
  userId             String   @db.ObjectId
  userAgent          String
  ipAddress          String
  isActive           Boolean  @default(true)
  lastActivity       DateTime @default(now())
  expiresAt          DateTime
  isTwoFactorVerified Boolean  @default(false)
  twoFactorVerifiedAt DateTime?
  invalidatedAt      DateTime?
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id])
  @@index([userId, isActive])
  @@index([expiresAt])
}